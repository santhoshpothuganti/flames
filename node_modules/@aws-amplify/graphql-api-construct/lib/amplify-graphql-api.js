"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AmplifyGraphqlApi = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const path = require("path");
const constructs_1 = require("constructs");
const graphql_transformer_1 = require("@aws-amplify/graphql-transformer");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const backend_output_storage_1 = require("@aws-amplify/backend-output-storage");
const backend_output_schemas_1 = require("@aws-amplify/backend-output-schemas");
const aws_appsync_1 = require("aws-cdk-lib/aws-appsync");
const user_defined_slots_1 = require("./internal/user-defined-slots");
const internal_1 = require("./internal");
const construct_tree_1 = require("./internal/construct-tree");
const data_source_config_1 = require("./internal/data-source-config");
/**
 * L3 Construct which invokes the Amplify Transformer Pattern over an input Graphql Schema.
 *
 * This can be used to quickly define appsync apis which support full CRUD+List and Subscriptions, relationships,
 * auth, search over data, the ability to inject custom business logic and query/mutation operations, and connect to ML services.
 *
 * For more information, refer to the docs links below:
 * Data Modeling - https://docs.amplify.aws/cli/graphql/data-modeling/
 * Authorization - https://docs.amplify.aws/cli/graphql/authorization-rules/
 * Custom Business Logic - https://docs.amplify.aws/cli/graphql/custom-business-logic/
 * Search - https://docs.amplify.aws/cli/graphql/search-and-result-aggregations/
 * ML Services - https://docs.amplify.aws/cli/graphql/connect-to-machine-learning-services/
 *
 * For a full reference of the supported custom graphql directives - https://docs.amplify.aws/cli/graphql/directives-reference/
 *
 * The output of this construct is a mapping of L2 or L1 resources generated by the transformer, which generally follow the access pattern
 *
 * ```typescript
 *   const api = new AmplifyGraphQlApi(this, 'api', { <params> });
 *   // Access L2 resources under `.resources`
 *   api.resources.tables["Todo"].tableArn;
 *
 *   // Access L1 resources under `.resources.cfnResources`
 *   api.resources.cfnResources.cfnGraphqlApi.xrayEnabled = true;
 *   Object.values(api.resources.cfnResources.cfnTables).forEach(table => {
 *     table.pointInTimeRecoverySpecification = { pointInTimeRecoveryEnabled: false };
 *   });
 * ```
 * `resources.<ResourceType>.<ResourceName>` - you can then perform any CDK action on these resulting resoureces.
 */
class AmplifyGraphqlApi extends constructs_1.Construct {
    /**
     * New AmplifyGraphqlApi construct, this will create an appsync api with authorization, a schema, and all necessary resolvers, functions,
     * and datasources.
     * @param scope the scope to create this construct within.
     * @param id the id to use for this api.
     * @param props the properties used to configure the generated api.
     */
    constructor(scope, id, props) {
        super(scope, id);
        /**
         * Be very careful editing this value. This is the string that is used to identify graphql stacks in BI metrics
         */
        this.stackType = 'api-AppSync';
        validateNoOtherAmplifyGraphqlApiInStack(this);
        const { definition, authorizationModes, conflictResolution, functionSlots, transformerPlugins, predictionsBucket, stackMappings, translationBehavior, functionNameMap, outputStorageStrategy, dataStoreConfiguration, } = props;
        if (conflictResolution && dataStoreConfiguration) {
            throw new Error('conflictResolution is deprecated. conflictResolution and dataStoreConfiguration cannot be used together. Please use dataStoreConfiguration.');
        }
        this.dataStoreConfiguration = dataStoreConfiguration || conflictResolution;
        const dataSources = getMetadataDataSources(definition);
        new backend_output_storage_1.AttributionMetadataStorage().storeAttributionMetadata(aws_cdk_lib_1.Stack.of(scope), this.stackType, path.join(__dirname, '..', 'package.json'), {
            dataSources,
        });
        (0, internal_1.validateAuthorizationModes)(authorizationModes);
        const { authConfig, authSynthParameters } = (0, internal_1.convertAuthorizationModesToTransformerAuthConfig)(authorizationModes);
        (0, user_defined_slots_1.validateFunctionSlots)(functionSlots ?? []);
        const separatedFunctionSlots = (0, user_defined_slots_1.separateSlots)([...(functionSlots ?? []), ...definition.functionSlots]);
        // Allow amplifyEnvironmentName to be retrieve from context, and use value 'NONE' if no value can be found.
        // amplifyEnvironmentName is required for logical id suffixing, as well as Exports from the nested stacks.
        // Allow export so customers can reuse the env in their own references downstream.
        const amplifyEnvironmentName = this.node.tryGetContext('amplifyEnvironmentName') ?? 'NONE';
        if (amplifyEnvironmentName.length > 8) {
            throw new Error(`or cdk --context env must have a length <= 8, found ${amplifyEnvironmentName}`);
        }
        const assetProvider = new internal_1.AssetProvider(this);
        const transformParameters = {
            ...internal_1.defaultTranslationBehavior,
            ...(translationBehavior ?? {}),
            allowGen1Patterns: false,
        };
        const executeTransformConfig = {
            scope: this,
            nestedStackProvider: {
                provide: (nestedStackScope, name) => new aws_cdk_lib_1.NestedStack(nestedStackScope, name),
            },
            assetProvider,
            synthParameters: {
                amplifyEnvironmentName: amplifyEnvironmentName,
                apiName: props.apiName ?? id,
                ...authSynthParameters,
                provisionHotswapFriendlyResources: translationBehavior?._provisionHotswapFriendlyResources,
            },
            schema: definition.schema,
            userDefinedSlots: (0, user_defined_slots_1.parseUserDefinedSlots)(separatedFunctionSlots),
            transformersFactoryArgs: {
                customTransformers: transformerPlugins ?? [],
                ...(predictionsBucket ? { storageConfig: { bucketName: predictionsBucket.bucketName } } : {}),
                functionNameMap: {
                    ...definition.referencedLambdaFunctions,
                    ...functionNameMap,
                },
            },
            authConfig,
            stackMapping: stackMappings ?? {},
            resolverConfig: this.dataStoreConfiguration ? (0, internal_1.convertToResolverConfig)(this.dataStoreConfiguration) : undefined,
            transformParameters,
            // CDK construct uses a custom resource. We'll define this explicitly here to remind ourselves that this value is unused in the CDK
            // construct flow
            rdsLayerMapping: undefined,
            rdsSnsTopicMapping: undefined,
            ...(0, data_source_config_1.getDataSourceStrategiesProvider)(definition),
        };
        (0, graphql_transformer_1.executeTransform)(executeTransformConfig);
        this.codegenAssets = new internal_1.CodegenAssets(this, 'AmplifyCodegenAssets', { modelSchema: definition.schema });
        this.resources = (0, internal_1.getGeneratedResources)(this);
        this.generatedFunctionSlots = (0, internal_1.getGeneratedFunctionSlots)(assetProvider.resolverAssets);
        this.storeOutput(outputStorageStrategy);
        this.apiId = this.resources.cfnResources.cfnGraphqlApi.attrApiId;
        this.graphqlUrl = this.resources.cfnResources.cfnGraphqlApi.attrGraphQlUrl;
        this.realtimeUrl = this.resources.cfnResources.cfnGraphqlApi.attrRealtimeUrl;
        this.apiKey = this.resources.cfnResources.cfnApiKey?.attrApiKey;
    }
    /**
     * Stores graphql api output to be used for client config generation
     * @param outputStorageStrategy Strategy to store construct outputs. If no strategy is provided a default strategy will be used.
     */
    storeOutput(outputStorageStrategy = new backend_output_storage_1.StackMetadataBackendOutputStorageStrategy(aws_cdk_lib_1.Stack.of(this))) {
        const stack = aws_cdk_lib_1.Stack.of(this);
        const output = {
            version: '1',
            payload: {
                awsAppsyncApiId: this.resources.cfnResources.cfnGraphqlApi.attrApiId,
                awsAppsyncApiEndpoint: this.resources.cfnResources.cfnGraphqlApi.attrGraphQlUrl,
                awsAppsyncAuthenticationType: this.resources.cfnResources.cfnGraphqlApi.authenticationType,
                awsAppsyncRegion: stack.region,
                amplifyApiModelSchemaS3Uri: this.codegenAssets.modelSchemaS3Uri,
            },
        };
        if (this.resources.cfnResources.cfnApiKey) {
            output.payload.awsAppsyncApiKey = this.resources.cfnResources.cfnApiKey.attrApiKey;
        }
        const additionalAuthTypes = (0, internal_1.getAdditionalAuthenticationTypes)(this.resources.cfnResources.cfnGraphqlApi);
        if (additionalAuthTypes) {
            output.payload.awsAppsyncAdditionalAuthenticationTypes = additionalAuthTypes;
        }
        if (this.dataStoreConfiguration?.project?.handlerType) {
            output.payload.awsAppsyncConflictResolutionMode = this.dataStoreConfiguration?.project?.handlerType;
        }
        outputStorageStrategy.addBackendOutputEntry(backend_output_schemas_1.graphqlOutputKey, output);
    }
    /**
     * The following are proxy methods to the L2 IGraphqlApi interface, to facilitate easier use of the L3 without needing
     * to access the underlying resources.
     */
    /**
     * Add a new DynamoDB data source to this API. This is a proxy method to the L2 GraphqlApi Construct.
     * @param id The data source's id.
     * @param table The DynamoDB table backing this data source.
     * @param options The optional configuration for this data source.
     * @returns the generated data source.
     */
    addDynamoDbDataSource(id, table, options) {
        return this.resources.graphqlApi.addDynamoDbDataSource(id, table, options);
    }
    /**
     * Add a new elasticsearch data source to this API. This is a proxy method to the L2 GraphqlApi Construct.
     * @deprecated use `addOpenSearchDataSource`
     * @param id The data source's id.
     * @param domain The elasticsearch domain for this data source.
     * @param options The optional configuration for this data source.
     * @returns the generated data source.
     */
    addElasticsearchDataSource(id, domain, options) {
        return this.resources.graphqlApi.addElasticsearchDataSource(id, domain, options);
    }
    /**
     * Add an EventBridge data source to this api. This is a proxy method to the L2 GraphqlApi Construct.
     * @param id The data source's id.
     * @param eventBus The EventBridge EventBus on which to put events.
     * @param options The optional configuration for this data source.
     */
    addEventBridgeDataSource(id, eventBus, options) {
        return this.resources.graphqlApi.addEventBridgeDataSource(id, eventBus, options);
    }
    /**
     * Add a new http data source to this API. This is a proxy method to the L2 GraphqlApi Construct.
     * @param id The data source's id.
     * @param endpoint The http endpoint.
     * @param options The optional configuration for this data source.
     * @returns the generated data source.
     */
    addHttpDataSource(id, endpoint, options) {
        return this.resources.graphqlApi.addHttpDataSource(id, endpoint, options);
    }
    /**
     * Add a new Lambda data source to this API. This is a proxy method to the L2 GraphqlApi Construct.
     * @param id The data source's id.
     * @param lambdaFunction The Lambda function to call to interact with this data source.
     * @param options The optional configuration for this data source.
     * @returns the generated data source.
     */
    addLambdaDataSource(id, lambdaFunction, options) {
        return this.resources.graphqlApi.addLambdaDataSource(id, lambdaFunction, options);
    }
    /**
     * Add a new dummy data source to this API. This is a proxy method to the L2 GraphqlApi Construct.
     * Useful for pipeline resolvers and for backend changes that don't require a data source.
     * @param id The data source's id.
     * @param options The optional configuration for this data source.
     * @returns the generated data source.
     */
    addNoneDataSource(id, options) {
        return this.resources.graphqlApi.addNoneDataSource(id, options);
    }
    /**
     * dd a new OpenSearch data source to this API. This is a proxy method to the L2 GraphqlApi Construct.
     * @param id The data source's id.
     * @param domain The OpenSearch domain for this data source.
     * @param options The optional configuration for this data source.
     * @returns the generated data source.
     */
    addOpenSearchDataSource(id, domain, options) {
        return this.resources.graphqlApi.addOpenSearchDataSource(id, domain, options);
    }
    /**
     * Add a new Rds data source to this API. This is a proxy method to the L2 GraphqlApi Construct.
     * @param id The data source's id.
     * @param serverlessCluster The serverless cluster to interact with this data source.
     * @param secretStore The secret store that contains the username and password for the serverless cluster.
     * @param databaseName The optional name of the database to use within the cluster.
     * @param options The optional configuration for this data source.
     * @returns the generated data source.
     */
    addRdsDataSource(id, serverlessCluster, secretStore, databaseName, options) {
        return this.resources.graphqlApi.addRdsDataSource(id, serverlessCluster, secretStore, databaseName, options);
    }
    /**
     * Add a resolver to the api. This is a proxy method to the L2 GraphqlApi Construct.
     * @param id The resolver's id.
     * @param props the resolver properties.
     * @returns the generated resolver.
     */
    addResolver(id, props) {
        return this.resources.graphqlApi.createResolver(id, props);
    }
    /**
     * Add an appsync function to the api.
     * @param id the function's id.
     * @returns the generated appsync function.
     */
    addFunction(id, props) {
        return new aws_appsync_1.AppsyncFunction(this, id, {
            api: this.resources.graphqlApi,
            ...props,
        });
    }
}
exports.AmplifyGraphqlApi = AmplifyGraphqlApi;
_a = JSII_RTTI_SYMBOL_1;
AmplifyGraphqlApi[_a] = { fqn: "@aws-amplify/graphql-api-construct.AmplifyGraphqlApi", version: "1.13.0" };
/**
 * Given the provided scope, walk the node tree, and throw an exception if any other AmplifyGraphqlApi constructs
 * are found in the stack.
 * @param scope the scope this construct is created in.
 */
const validateNoOtherAmplifyGraphqlApiInStack = (scope) => {
    const rootStack = (0, construct_tree_1.getStackForScope)(scope, false);
    let wasOtherAmplifyGraphlApiFound = false;
    (0, construct_tree_1.walkAndProcessNodes)(rootStack, (node) => {
        if (node instanceof AmplifyGraphqlApi && scope !== node) {
            wasOtherAmplifyGraphlApiFound = true;
        }
    });
    if (wasOtherAmplifyGraphlApiFound) {
        throw new Error('Only one AmplifyGraphqlApi is expected in a stack. Place the AmplifyGraphqlApis in separate nested stacks.');
    }
};
const getMetadataDataSources = (definition) => {
    const dataSourceDbTypes = Object.values(definition.dataSourceStrategies).map((strategy) => strategy.dbType.toLocaleLowerCase());
    const customSqlDbTypes = (definition.customSqlDataSourceStrategies ?? []).map((strategy) => strategy.strategy.dbType.toLocaleLowerCase());
    const dataSources = [...new Set([...dataSourceDbTypes, ...customSqlDbTypes])].sort();
    return dataSources.join(',');
};
//# sourceMappingURL=data:application/json;base64,