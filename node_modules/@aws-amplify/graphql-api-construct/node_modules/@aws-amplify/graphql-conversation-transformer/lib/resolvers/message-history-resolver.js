"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readHistoryMappingTemplate = void 0;
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const ts_dedent_1 = require("ts-dedent");
const readHistoryMappingTemplate = () => {
    const req = createMessageHistoryRequestFunction();
    const res = createMessageHistoryResponseFunction();
    return { req, res };
};
exports.readHistoryMappingTemplate = readHistoryMappingTemplate;
const createMessageHistoryRequestFunction = () => {
    const requestFunctionString = `
      export function request(ctx) {
        const { conversationId } = ctx.args;
        const { authFilter } = ctx.stash;

        const limit = 100;
        const query = {
          expression: 'conversationId = :conversationId',
          expressionValues: util.dynamodb.toMapValues({
            ':conversationId': ctx.args.conversationId
          })
        };

        const filter = JSON.parse(util.transform.toDynamoDBFilterExpression(authFilter));
        const index = 'gsi-ConversationMessage.conversationId.createdAt';

        return {
          operation: 'Query',
          query,
          filter,
          index,
          scanIndexForward: false,
        }
      }`;
    return graphql_transformer_core_1.MappingTemplate.inlineTemplateFromString((0, ts_dedent_1.dedent)(requestFunctionString));
};
const createMessageHistoryResponseFunction = () => {
    const responseFunctionString = `
      export function response(ctx) {
        if (ctx.error) {
          util.error(ctx.error.message, ctx.error.type);
        }
        const messagesWithAssistantResponse = ctx.result.items
          .filter((message) => message.assistantContent !== undefined)
          .reduce((acc, current) => {
              acc.push({ role: 'user', content: current.content });
              acc.push({ role: 'assistant', content: current.assistantContent });
              return acc;
          }, [])

        const currentMessage = { role: 'user', content: ctx.prev.result.content };
        const items = [...messagesWithAssistantResponse, currentMessage];
        return { items };
      }`;
    return graphql_transformer_core_1.MappingTemplate.inlineTemplateFromString((0, ts_dedent_1.dedent)(responseFunctionString));
};
//# sourceMappingURL=message-history-resolver.js.map