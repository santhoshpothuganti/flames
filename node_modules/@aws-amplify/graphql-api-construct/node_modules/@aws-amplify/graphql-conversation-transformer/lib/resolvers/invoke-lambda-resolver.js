"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.invokeLambdaMappingTemplate = void 0;
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const ts_dedent_1 = require("ts-dedent");
const invokeLambdaMappingTemplate = (config, ctx) => {
    const req = createInvokeLambdaRequestFunction(config, ctx);
    const res = createInvokeLambdaResponseFunction(config);
    return { req, res };
};
exports.invokeLambdaMappingTemplate = invokeLambdaMappingTemplate;
const createInvokeLambdaRequestFunction = (config, ctx) => {
    const { responseMutationInputTypeName, responseMutationName } = config;
    const toolDefinitions = JSON.stringify(config.toolSpec);
    const toolDefinitionsLine = toolDefinitions ? `const toolDefinitions = ${toolDefinitions};` : '';
    const modelConfigurationLine = generateModelConfigurationLine(config);
    const graphqlEndpoint = ctx.api.graphqlUrl;
    const toolsConfigurationLine = toolDefinitions
        ? (0, ts_dedent_1.dedent) `const dataTools = toolDefinitions.tools;
     const toolsConfiguration = {
      dataTools,
      clientTools,
    };`
        : (0, ts_dedent_1.dedent) `const toolsConfiguration = {
      clientTools
    };`;
    const requestFunctionString = `
  import { util } from '@aws-appsync/utils';

  export function request(ctx) {
    const { args, identity, request, prev } = ctx;
    ${toolDefinitionsLine}
    const selectionSet = '${selectionSet}';
    const graphqlApiEndpoint = '${graphqlEndpoint}';

    const messages = prev.result.items;
    const responseMutation = {
      name: '${responseMutationName}',
      inputTypeName: '${responseMutationInputTypeName}',
      selectionSet,
    };
    const currentMessageId = ctx.stash.defaultValues.id;
    ${modelConfigurationLine}

    const clientTools = args.toolConfiguration?.tools?.map((tool) => { return { ...tool.toolSpec }});
    ${toolsConfigurationLine}

    const authHeader = request.headers['authorization'];
    const payload = {
      conversationId: args.conversationId,
      currentMessageId,
      responseMutation,
      graphqlApiEndpoint,
      modelConfiguration,
      request: { headers: { authorization: authHeader }},
      messages,
      toolsConfiguration,
    };

    return {
      operation: 'Invoke',
      payload,
      invocationType: 'Event'
    };
  }`;
    return graphql_transformer_core_1.MappingTemplate.inlineTemplateFromString((0, ts_dedent_1.dedent)(requestFunctionString));
};
const createInvokeLambdaResponseFunction = (config) => {
    const responseFunctionString = `
  export function response(ctx) {
    let success = true;
    if (ctx.error) {
      util.appendError(ctx.error.message, ctx.error.type);
      success = false;
    }
    const response = {
        __typename: '${config.messageModel.messageModel.name.value}',
        id: ctx.stash.defaultValues.id,
        conversationId: ctx.args.conversationId,
        role: 'user',
        content: ctx.args.content,
        createdAt: ctx.stash.defaultValues.createdAt,
        updatedAt: ctx.stash.defaultValues.updatedAt,
    };
    return response;
  }`;
    return graphql_transformer_core_1.MappingTemplate.inlineTemplateFromString((0, ts_dedent_1.dedent)(responseFunctionString));
};
const generateModelConfigurationLine = (config) => {
    const { aiModel, systemPrompt } = config;
    return (0, ts_dedent_1.dedent) `const modelConfiguration = {
    modelId: '${aiModel}',
    systemPrompt: ${JSON.stringify(systemPrompt)},
    ${generateModelInferenceConfigurationLine(config)}
  };`;
};
const generateModelInferenceConfigurationLine = (config) => {
    const { inferenceConfiguration } = config;
    return inferenceConfiguration && Object.keys(inferenceConfiguration).length > 0
        ? (0, ts_dedent_1.dedent) `inferenceConfiguration: ${JSON.stringify(config.inferenceConfiguration)},`
        : '';
};
const selectionSet = `id conversationId content { image { format source { bytes }} text toolUse { toolUseId name input } toolResult { status toolUseId content { json text image { format source { bytes }} document { format name source { bytes }} }}} role owner createdAt updatedAt`;
//# sourceMappingURL=invoke-lambda-resolver.js.map