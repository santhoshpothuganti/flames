"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConversationResolverGenerator = void 0;
const tools_1 = require("../utils/tools");
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const graphql_transformer_common_1 = require("graphql-transformer-common");
const cdk = __importStar(require("aws-cdk-lib"));
const ai_constructs_1 = require("@aws-amplify/ai-constructs");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const graphql_transformer_core_2 = require("@aws-amplify/graphql-transformer-core");
const init_resolver_1 = require("../resolvers/init-resolver");
const auth_resolver_1 = require("../resolvers/auth-resolver");
const verify_session_owner_resolver_1 = require("../resolvers/verify-session-owner-resolver");
const write_message_to_table_resolver_1 = require("../resolvers/write-message-to-table-resolver");
const message_history_resolver_1 = require("../resolvers/message-history-resolver");
const invoke_lambda_resolver_1 = require("../resolvers/invoke-lambda-resolver");
const assistant_mutation_resolver_1 = require("../resolvers/assistant-mutation-resolver");
const assistant_messages_subscription_resolver_1 = require("../resolvers/assistant-messages-subscription-resolver");
const graphql_index_transformer_1 = require("@aws-amplify/graphql-index-transformer");
class ConversationResolverGenerator {
    generateResolvers(directives, ctx) {
        for (const directive of directives) {
            this.processToolsForDirective(directive, ctx);
            this.generateResolversForDirective(directive, ctx);
        }
    }
    processToolsForDirective(directive, ctx) {
        const tools = (0, tools_1.processTools)(directive.tools, ctx);
        if (tools) {
            directive.toolSpec = tools;
        }
    }
    generateResolversForDirective(directive, ctx) {
        const { parent, field } = directive;
        const parentName = parent.name.value;
        const capitalizedFieldName = (0, graphql_transformer_common_1.toUpper)(field.name.value);
        const fieldName = field.name.value;
        const functionStack = this.createFunctionStack(ctx, capitalizedFieldName);
        const { functionDataSourceId, referencedFunction } = this.setupFunctionDataSource(directive, functionStack, capitalizedFieldName);
        this.createAssistantResponseResolver(ctx, directive, capitalizedFieldName);
        this.createAssistantResponseSubscriptionResolver(ctx, capitalizedFieldName);
        const functionDataSource = this.addLambdaDataSource(ctx, functionDataSourceId, referencedFunction, capitalizedFieldName);
        const invokeLambdaFunction = (0, invoke_lambda_resolver_1.invokeLambdaMappingTemplate)(directive, ctx);
        this.setupMessageTableIndex(ctx, directive);
        this.createConversationPipelineResolver(ctx, parentName, fieldName, capitalizedFieldName, functionDataSource, invokeLambdaFunction);
    }
    createFunctionStack(ctx, capitalizedFieldName) {
        return ctx.stackManager.createStack(`${capitalizedFieldName}ConversationDirectiveLambdaStack`);
    }
    setupFunctionDataSource(directive, functionStack, capitalizedFieldName) {
        if (directive.functionName) {
            return this.setupExistingFunctionDataSource(directive.functionName, functionStack);
        }
        else {
            return this.setupDefaultConversationHandler(functionStack, capitalizedFieldName, directive.aiModel);
        }
    }
    setupExistingFunctionDataSource(functionName, functionStack) {
        const functionDataSourceId = graphql_transformer_common_1.FunctionResourceIDs.FunctionDataSourceID(functionName);
        const referencedFunction = aws_lambda_1.Function.fromFunctionAttributes(functionStack, `${functionDataSourceId}Function`, {
            functionArn: this.lambdaArnResource(functionName),
        });
        return { functionDataSourceId, referencedFunction };
    }
    lambdaArnResource(name) {
        return cdk.Fn.sub('arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${name}', { name });
    }
    setupDefaultConversationHandler(functionStack, capitalizedFieldName, aiModel) {
        const defaultConversationHandler = new ai_constructs_1.conversation.ConversationHandlerFunction(functionStack, `${capitalizedFieldName}DefaultConversationHandler`, {
            models: [
                {
                    modelId: aiModel,
                },
            ],
        });
        const functionDataSourceId = graphql_transformer_common_1.FunctionResourceIDs.FunctionDataSourceID(`${capitalizedFieldName}DefaultConversationHandler`);
        const referencedFunction = defaultConversationHandler.resources.lambda;
        return { functionDataSourceId, referencedFunction };
    }
    createConversationPipelineResolver(ctx, parentName, fieldName, capitalizedFieldName, functionDataSource, invokeLambdaFunction) {
        const resolverResourceId = graphql_transformer_common_1.ResolverResourceIDs.ResolverResourceID(parentName, fieldName);
        const runtime = { name: 'APPSYNC_JS', runtimeVersion: '1.0.0' };
        const conversationPipelineResolver = new graphql_transformer_core_1.TransformerResolver(parentName, fieldName, resolverResourceId, invokeLambdaFunction.req, invokeLambdaFunction.res, ['init', 'auth', 'verifySessionOwner', 'writeMessageToTable', 'retrieveMessageHistory'], ['handleLambdaResponse', 'finish'], functionDataSource, runtime);
        this.addPipelineResolverFunctions(ctx, conversationPipelineResolver, capitalizedFieldName, runtime);
        ctx.resolvers.addResolver(parentName, fieldName, conversationPipelineResolver);
    }
    addPipelineResolverFunctions(ctx, resolver, capitalizedFieldName, runtime) {
        const initFunction = (0, init_resolver_1.initMappingTemplate)();
        resolver.addToSlot('init', initFunction.req, initFunction.res, undefined, runtime);
        const authFunction = (0, auth_resolver_1.authMappingTemplate)();
        resolver.addToSlot('auth', authFunction.req, authFunction.res, undefined, runtime);
        const verifySessionOwnerFunction = (0, verify_session_owner_resolver_1.verifySessionOwnerMappingTemplate)();
        const sessionModelName = `Conversation${capitalizedFieldName}`;
        const sessionModelDDBDataSourceName = (0, graphql_transformer_core_2.getModelDataSourceNameForTypeName)(ctx, sessionModelName);
        const conversationSessionDDBDataSource = ctx.api.host.getDataSource(sessionModelDDBDataSourceName);
        resolver.addToSlot('verifySessionOwner', verifySessionOwnerFunction.req, verifySessionOwnerFunction.res, conversationSessionDDBDataSource, runtime);
        const writeMessageToTableFunction = (0, write_message_to_table_resolver_1.writeMessageToTableMappingTemplate)(capitalizedFieldName);
        const messageModelName = `ConversationMessage${capitalizedFieldName}`;
        const messageModelDDBDataSourceName = (0, graphql_transformer_core_2.getModelDataSourceNameForTypeName)(ctx, messageModelName);
        const messageDDBDataSource = ctx.api.host.getDataSource(messageModelDDBDataSourceName);
        resolver.addToSlot('writeMessageToTable', writeMessageToTableFunction.req, writeMessageToTableFunction.res, messageDDBDataSource, runtime);
        const retrieveMessageHistoryFunction = (0, message_history_resolver_1.readHistoryMappingTemplate)();
        resolver.addToSlot('retrieveMessageHistory', retrieveMessageHistoryFunction.req, retrieveMessageHistoryFunction.res, messageDDBDataSource, runtime);
    }
    createAssistantResponseResolver(ctx, directive, capitalizedFieldName) {
        const assistantResponseResolverResourceId = graphql_transformer_common_1.ResolverResourceIDs.ResolverResourceID('Mutation', directive.responseMutationName);
        const assistantResponseResolverFunction = (0, assistant_mutation_resolver_1.assistantMutationResolver)();
        const conversationMessageDataSourceName = (0, graphql_transformer_core_2.getModelDataSourceNameForTypeName)(ctx, `ConversationMessage${capitalizedFieldName}`);
        const conversationMessageDataSource = ctx.api.host.getDataSource(conversationMessageDataSourceName);
        const runtime = { name: 'APPSYNC_JS', runtimeVersion: '1.0.0' };
        const assistantResponseResolver = new graphql_transformer_core_1.TransformerResolver('Mutation', directive.responseMutationName, assistantResponseResolverResourceId, assistantResponseResolverFunction.req, assistantResponseResolverFunction.res, [], [], conversationMessageDataSource, runtime);
        ctx.resolvers.addResolver('Mutation', directive.responseMutationName, assistantResponseResolver);
    }
    createAssistantResponseSubscriptionResolver(ctx, capitalizedFieldName) {
        const onAssistantResponseSubscriptionFieldName = `onCreateAssistantResponse${capitalizedFieldName}`;
        const onAssistantResponseSubscriptionResolverResourceId = graphql_transformer_common_1.ResolverResourceIDs.ResolverResourceID('Subscription', onAssistantResponseSubscriptionFieldName);
        const onAssistantResponseSubscriptionResolverFunction = (0, assistant_messages_subscription_resolver_1.conversationMessageSubscriptionMappingTamplate)();
        const runtime = { name: 'APPSYNC_JS', runtimeVersion: '1.0.0' };
        const onAssistantResponseSubscriptionResolver = new graphql_transformer_core_1.TransformerResolver('Subscription', onAssistantResponseSubscriptionFieldName, onAssistantResponseSubscriptionResolverResourceId, onAssistantResponseSubscriptionResolverFunction.req, onAssistantResponseSubscriptionResolverFunction.res, [], [], undefined, runtime);
        ctx.resolvers.addResolver('Subscription', onAssistantResponseSubscriptionFieldName, onAssistantResponseSubscriptionResolver);
    }
    addLambdaDataSource(ctx, functionDataSourceId, referencedFunction, capitalizedFieldName) {
        const functionDataSourceScope = ctx.stackManager.getScopeFor(functionDataSourceId, `${capitalizedFieldName}ConversationDirectiveLambdaStack`);
        return ctx.api.host.addLambdaDataSource(functionDataSourceId, referencedFunction, {}, functionDataSourceScope);
    }
    setupMessageTableIndex(ctx, directive) {
        const messageModelName = directive.messageModel.messageModel.name.value;
        const referenceFieldName = 'conversationId';
        const messageModel = directive.messageModel.messageModel;
        const conversationMessagesTable = (0, graphql_transformer_core_2.getTable)(ctx, messageModel);
        const gsiPartitionKeyName = referenceFieldName;
        const gsiPartitionKeyType = 'S';
        const gsiSortKeyName = 'createdAt';
        const gsiSortKeyType = 'S';
        const indexName = 'gsi-ConversationMessage.conversationId.createdAt';
        this.addGlobalSecondaryIndex(conversationMessagesTable, indexName, { name: gsiPartitionKeyName, type: gsiPartitionKeyType }, { name: gsiSortKeyName, type: gsiSortKeyType }, ctx, messageModelName);
    }
    addGlobalSecondaryIndex(table, indexName, partitionKey, sortKey, ctx, typeName) {
        table.addGlobalSecondaryIndex({
            indexName,
            projectionType: 'ALL',
            partitionKey,
            sortKey,
            readCapacity: cdk.Fn.ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.DynamoDBModelTableReadIOPS),
            writeCapacity: cdk.Fn.ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.DynamoDBModelTableWriteIOPS),
        });
        const gsi = table.globalSecondaryIndexes.find((g) => g.indexName === indexName);
        const newIndex = {
            indexName,
            keySchema: gsi.keySchema,
            projection: { projectionType: 'ALL' },
            provisionedThroughput: cdk.Fn.conditionIf(graphql_transformer_common_1.ResourceConstants.CONDITIONS.ShouldUsePayPerRequestBilling, cdk.Fn.ref('AWS::NoValue'), {
                ReadCapacityUnits: cdk.Fn.ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.DynamoDBModelTableReadIOPS),
                WriteCapacityUnits: cdk.Fn.ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.DynamoDBModelTableWriteIOPS),
            }),
        };
        (0, graphql_index_transformer_1.overrideIndexAtCfnLevel)(ctx, typeName, table, newIndex);
    }
}
exports.ConversationResolverGenerator = ConversationResolverGenerator;
//# sourceMappingURL=conversation-resolver-generator.js.map