"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createInvokeBedrockResolverFunction = void 0;
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const ts_dedent_1 = require("ts-dedent");
const createInvokeBedrockResolverFunction = (config) => {
    const req = createInvokeBedrockRequestFunction(config);
    const res = createInvokeBedrockResponseFunction();
    return { req, res };
};
exports.createInvokeBedrockResolverFunction = createInvokeBedrockResolverFunction;
const createInvokeBedrockRequestFunction = (config) => {
    const { aiModel, toolConfig, inferenceConfiguration } = config;
    const stringifiedToolConfig = JSON.stringify(toolConfig);
    const stringifiedSystemPrompt = JSON.stringify(config.systemPrompt);
    const inferenceConfig = getInferenceConfigResolverDefinition(inferenceConfiguration);
    const requestFunctionString = `
  export function request(ctx) {
    const toolConfig = ${stringifiedToolConfig};
    const prompt = ${stringifiedSystemPrompt};
    const args = JSON.stringify(ctx.args);

    return {
      resourcePath: '/model/${aiModel}/converse',
      method: 'POST',
      params: {
        headers: { 'Content-Type': 'application/json' },
        body: {
          messages: [{
            role: 'user',
            content: [{ text: args }],
          }],
          system: [{ text: prompt }],
          toolConfig,
          ${inferenceConfig}
        }
      }
    }
  }
`;
    return graphql_transformer_core_1.MappingTemplate.inlineTemplateFromString((0, ts_dedent_1.dedent)(requestFunctionString));
};
const createInvokeBedrockResponseFunction = () => {
    const responseFunctionString = `
  export function response(ctx) {
    if (ctx.error) {
      util.error(ctx.error.message, ctx.error.type);
    }
    const body = JSON.parse(ctx.result.body);
    const { content } = body.output.message;

    if (content.length < 1) {
      util.error('No content block in assistant response.', 'error');
    }

    const toolUse = content[0].toolUse;
    if (!toolUse) {
      util.error('Missing tool use block in assistant response.', 'error');
    }

    const response = toolUse.input.value;
    return response;
  }
`;
    return graphql_transformer_core_1.MappingTemplate.inlineTemplateFromString((0, ts_dedent_1.dedent)(responseFunctionString));
};
const getInferenceConfigResolverDefinition = (inferenceConfiguration) => {
    return inferenceConfiguration && Object.keys(inferenceConfiguration).length > 0
        ? `inferenceConfig: ${JSON.stringify(inferenceConfiguration)},`
        : '// default inference config';
};
//# sourceMappingURL=invoke-bedrock.js.map