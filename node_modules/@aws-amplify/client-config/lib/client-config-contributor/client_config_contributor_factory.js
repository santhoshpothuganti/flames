// Versions of config schemas supported by this package version
import { AuthClientConfigContributor as Auth1_1, CustomClientConfigContributor as Custom1_1, DataClientConfigContributor as Data1_1, StorageClientConfigContributorV1 as Storage1, StorageClientConfigContributor as Storage1_1, VersionContributor as VersionContributor1_1, VersionContributorV1, } from './client_config_contributor_v1.js';
import { ClientConfigVersionOption, } from '../client-config-types/client_config.js';
/**
 * Factory to generate client config contributors for client config schema given a version
 */
export class ClientConfigContributorFactory {
    modelIntrospectionSchemaAdapter;
    versionedClientConfigContributors;
    /**
     * Creates a list of all contributors available and caches it.
     */
    constructor(modelIntrospectionSchemaAdapter) {
        this.modelIntrospectionSchemaAdapter = modelIntrospectionSchemaAdapter;
        this.versionedClientConfigContributors = {
            [ClientConfigVersionOption.V1_1]: [
                new Auth1_1(),
                new Data1_1(this.modelIntrospectionSchemaAdapter),
                new Storage1_1(),
                new VersionContributor1_1(),
                new Custom1_1(),
            ],
            // Except for storage and version, other contributors are same as V1
            [ClientConfigVersionOption.V1]: [
                new Auth1_1(),
                new Data1_1(this.modelIntrospectionSchemaAdapter),
                new Storage1(),
                new VersionContributorV1(),
                new Custom1_1(),
            ],
            // Legacy config is derived from V1.1 (latest) of unified default config
            [ClientConfigVersionOption.V0]: [
                new Auth1_1(),
                new Data1_1(this.modelIntrospectionSchemaAdapter),
                new Storage1_1(),
                new VersionContributor1_1(),
                new Custom1_1(),
            ],
        };
    }
    /**
     * Return all the contributors for the given version
     */
    getContributors(version) {
        return this.versionedClientConfigContributors[version];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50X2NvbmZpZ19jb250cmlidXRvcl9mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NsaWVudC1jb25maWctY29udHJpYnV0b3IvY2xpZW50X2NvbmZpZ19jb250cmlidXRvcl9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLCtEQUErRDtBQUMvRCxPQUFPLEVBQ0wsMkJBQTJCLElBQUksT0FBTyxFQUN0Qyw2QkFBNkIsSUFBSSxTQUFTLEVBQzFDLDJCQUEyQixJQUFJLE9BQU8sRUFDdEMsZ0NBQWdDLElBQUksUUFBUSxFQUM1Qyw4QkFBOEIsSUFBSSxVQUFVLEVBQzVDLGtCQUFrQixJQUFJLHFCQUFxQixFQUMzQyxvQkFBb0IsR0FDckIsTUFBTSxtQ0FBbUMsQ0FBQztBQUkzQyxPQUFPLEVBRUwseUJBQXlCLEdBQzFCLE1BQU0seUNBQXlDLENBQUM7QUFDakQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sOEJBQThCO0lBVXRCO0lBVG5CLGlDQUFpQyxDQUcvQjtJQUVGOztPQUVHO0lBQ0gsWUFDbUIsK0JBQWdFO1FBQWhFLG9DQUErQixHQUEvQiwrQkFBK0IsQ0FBaUM7UUFFakYsSUFBSSxDQUFDLGlDQUFpQyxHQUFHO1lBQ3ZDLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ2hDLElBQUksT0FBTyxFQUFFO2dCQUNiLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQywrQkFBK0IsQ0FBQztnQkFDakQsSUFBSSxVQUFVLEVBQUU7Z0JBQ2hCLElBQUkscUJBQXFCLEVBQUU7Z0JBQzNCLElBQUksU0FBUyxFQUFFO2FBQ2hCO1lBRUQsb0VBQW9FO1lBQ3BFLENBQUMseUJBQXlCLENBQUMsRUFBRSxDQUFDLEVBQUU7Z0JBQzlCLElBQUksT0FBTyxFQUFFO2dCQUNiLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQywrQkFBK0IsQ0FBQztnQkFDakQsSUFBSSxRQUFRLEVBQUU7Z0JBQ2QsSUFBSSxvQkFBb0IsRUFBRTtnQkFDMUIsSUFBSSxTQUFTLEVBQUU7YUFDaEI7WUFFRCx3RUFBd0U7WUFDeEUsQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFLENBQUMsRUFBRTtnQkFDOUIsSUFBSSxPQUFPLEVBQUU7Z0JBQ2IsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLCtCQUErQixDQUFDO2dCQUNqRCxJQUFJLFVBQVUsRUFBRTtnQkFDaEIsSUFBSSxxQkFBcUIsRUFBRTtnQkFDM0IsSUFBSSxTQUFTLEVBQUU7YUFDaEI7U0FDRixDQUFDO0lBQ0osQ0FBQztJQUVEOztPQUVHO0lBQ0gsZUFBZSxDQUFDLE9BQTRCO1FBQzFDLE9BQU8sSUFBSSxDQUFDLGlDQUFpQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3pELENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbIi8vIFZlcnNpb25zIG9mIGNvbmZpZyBzY2hlbWFzIHN1cHBvcnRlZCBieSB0aGlzIHBhY2thZ2UgdmVyc2lvblxuaW1wb3J0IHtcbiAgQXV0aENsaWVudENvbmZpZ0NvbnRyaWJ1dG9yIGFzIEF1dGgxXzEsXG4gIEN1c3RvbUNsaWVudENvbmZpZ0NvbnRyaWJ1dG9yIGFzIEN1c3RvbTFfMSxcbiAgRGF0YUNsaWVudENvbmZpZ0NvbnRyaWJ1dG9yIGFzIERhdGExXzEsXG4gIFN0b3JhZ2VDbGllbnRDb25maWdDb250cmlidXRvclYxIGFzIFN0b3JhZ2UxLFxuICBTdG9yYWdlQ2xpZW50Q29uZmlnQ29udHJpYnV0b3IgYXMgU3RvcmFnZTFfMSxcbiAgVmVyc2lvbkNvbnRyaWJ1dG9yIGFzIFZlcnNpb25Db250cmlidXRvcjFfMSxcbiAgVmVyc2lvbkNvbnRyaWJ1dG9yVjEsXG59IGZyb20gJy4vY2xpZW50X2NvbmZpZ19jb250cmlidXRvcl92MS5qcyc7XG5cbmltcG9ydCB7IENsaWVudENvbmZpZ0NvbnRyaWJ1dG9yIH0gZnJvbSAnLi4vY2xpZW50LWNvbmZpZy10eXBlcy9jbGllbnRfY29uZmlnX2NvbnRyaWJ1dG9yLmpzJztcbmltcG9ydCB7IE1vZGVsSW50cm9zcGVjdGlvblNjaGVtYUFkYXB0ZXIgfSBmcm9tICcuLi9tb2RlbF9pbnRyb3NwZWN0aW9uX3NjaGVtYV9hZGFwdGVyLmpzJztcbmltcG9ydCB7XG4gIENsaWVudENvbmZpZ1ZlcnNpb24sXG4gIENsaWVudENvbmZpZ1ZlcnNpb25PcHRpb24sXG59IGZyb20gJy4uL2NsaWVudC1jb25maWctdHlwZXMvY2xpZW50X2NvbmZpZy5qcyc7XG4vKipcbiAqIEZhY3RvcnkgdG8gZ2VuZXJhdGUgY2xpZW50IGNvbmZpZyBjb250cmlidXRvcnMgZm9yIGNsaWVudCBjb25maWcgc2NoZW1hIGdpdmVuIGEgdmVyc2lvblxuICovXG5leHBvcnQgY2xhc3MgQ2xpZW50Q29uZmlnQ29udHJpYnV0b3JGYWN0b3J5IHtcbiAgdmVyc2lvbmVkQ2xpZW50Q29uZmlnQ29udHJpYnV0b3JzOiBSZWNvcmQ8XG4gICAgQ2xpZW50Q29uZmlnVmVyc2lvbixcbiAgICBDbGllbnRDb25maWdDb250cmlidXRvcltdXG4gID47XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBsaXN0IG9mIGFsbCBjb250cmlidXRvcnMgYXZhaWxhYmxlIGFuZCBjYWNoZXMgaXQuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IG1vZGVsSW50cm9zcGVjdGlvblNjaGVtYUFkYXB0ZXI6IE1vZGVsSW50cm9zcGVjdGlvblNjaGVtYUFkYXB0ZXJcbiAgKSB7XG4gICAgdGhpcy52ZXJzaW9uZWRDbGllbnRDb25maWdDb250cmlidXRvcnMgPSB7XG4gICAgICBbQ2xpZW50Q29uZmlnVmVyc2lvbk9wdGlvbi5WMV8xXTogW1xuICAgICAgICBuZXcgQXV0aDFfMSgpLFxuICAgICAgICBuZXcgRGF0YTFfMSh0aGlzLm1vZGVsSW50cm9zcGVjdGlvblNjaGVtYUFkYXB0ZXIpLFxuICAgICAgICBuZXcgU3RvcmFnZTFfMSgpLFxuICAgICAgICBuZXcgVmVyc2lvbkNvbnRyaWJ1dG9yMV8xKCksXG4gICAgICAgIG5ldyBDdXN0b20xXzEoKSxcbiAgICAgIF0sXG5cbiAgICAgIC8vIEV4Y2VwdCBmb3Igc3RvcmFnZSBhbmQgdmVyc2lvbiwgb3RoZXIgY29udHJpYnV0b3JzIGFyZSBzYW1lIGFzIFYxXG4gICAgICBbQ2xpZW50Q29uZmlnVmVyc2lvbk9wdGlvbi5WMV06IFtcbiAgICAgICAgbmV3IEF1dGgxXzEoKSxcbiAgICAgICAgbmV3IERhdGExXzEodGhpcy5tb2RlbEludHJvc3BlY3Rpb25TY2hlbWFBZGFwdGVyKSxcbiAgICAgICAgbmV3IFN0b3JhZ2UxKCksXG4gICAgICAgIG5ldyBWZXJzaW9uQ29udHJpYnV0b3JWMSgpLFxuICAgICAgICBuZXcgQ3VzdG9tMV8xKCksXG4gICAgICBdLFxuXG4gICAgICAvLyBMZWdhY3kgY29uZmlnIGlzIGRlcml2ZWQgZnJvbSBWMS4xIChsYXRlc3QpIG9mIHVuaWZpZWQgZGVmYXVsdCBjb25maWdcbiAgICAgIFtDbGllbnRDb25maWdWZXJzaW9uT3B0aW9uLlYwXTogW1xuICAgICAgICBuZXcgQXV0aDFfMSgpLFxuICAgICAgICBuZXcgRGF0YTFfMSh0aGlzLm1vZGVsSW50cm9zcGVjdGlvblNjaGVtYUFkYXB0ZXIpLFxuICAgICAgICBuZXcgU3RvcmFnZTFfMSgpLFxuICAgICAgICBuZXcgVmVyc2lvbkNvbnRyaWJ1dG9yMV8xKCksXG4gICAgICAgIG5ldyBDdXN0b20xXzEoKSxcbiAgICAgIF0sXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYWxsIHRoZSBjb250cmlidXRvcnMgZm9yIHRoZSBnaXZlbiB2ZXJzaW9uXG4gICAqL1xuICBnZXRDb250cmlidXRvcnModmVyc2lvbjogQ2xpZW50Q29uZmlnVmVyc2lvbikge1xuICAgIHJldHVybiB0aGlzLnZlcnNpb25lZENsaWVudENvbmZpZ0NvbnRyaWJ1dG9yc1t2ZXJzaW9uXTtcbiAgfVxufVxuIl19