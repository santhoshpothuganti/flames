import { PackageManagerControllerFactory, } from '@aws-amplify/cli-core';
import { FileWatchingSandbox } from './file_watching_sandbox.js';
import { BackendDeployerFactory } from '@aws-amplify/backend-deployer';
import { AmplifySandboxExecutor } from './sandbox_executor.js';
import { SSMClient } from '@aws-sdk/client-ssm';
import { getSecretClientWithAmplifyErrorHandling } from '@aws-amplify/backend-secret';
import { CloudWatchLogsClient } from '@aws-sdk/client-cloudwatch-logs';
import { LambdaClient } from '@aws-sdk/client-lambda';
import { BackendOutputClientFactory } from '@aws-amplify/deployed-backend-client';
import { LambdaFunctionLogStreamer } from './lambda_function_log_streamer.js';
import { CloudWatchLogEventMonitor } from './cloudwatch_logs_monitor.js';
import { CloudFormationClient } from '@aws-sdk/client-cloudformation';
/**
 * Factory to create a new sandbox
 */
export class SandboxSingletonFactory {
    sandboxIdResolver;
    printer;
    format;
    instance;
    /**
     * sandboxIdResolver allows sandbox to lazily load the sandbox backend id on demand
     */
    constructor(sandboxIdResolver, printer, format) {
        this.sandboxIdResolver = sandboxIdResolver;
        this.printer = printer;
        this.format = format;
    }
    /**
     * Returns a singleton instance of a Sandbox
     */
    getInstance = async () => {
        if (!this.instance) {
            const packageManagerControllerFactory = new PackageManagerControllerFactory(process.cwd(), this.printer);
            const backendDeployerFactory = new BackendDeployerFactory(packageManagerControllerFactory.getPackageManagerController(), this.format);
            const cfnClient = new CloudFormationClient();
            this.instance = new FileWatchingSandbox(this.sandboxIdResolver, new AmplifySandboxExecutor(backendDeployerFactory.getInstance(), getSecretClientWithAmplifyErrorHandling(), this.printer), new SSMClient(), new LambdaFunctionLogStreamer(new LambdaClient(), cfnClient, new CloudWatchLogEventMonitor(new CloudWatchLogsClient()), BackendOutputClientFactory.getInstance(), this.printer), this.printer);
        }
        return this.instance;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9zaW5nbGV0b25fZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zYW5kYm94X3NpbmdsZXRvbl9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCwrQkFBK0IsR0FFaEMsTUFBTSx1QkFBdUIsQ0FBQztBQUMvQixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUVqRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUN2RSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDaEQsT0FBTyxFQUFFLHVDQUF1QyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDdEYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDdkUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3RELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRXRFOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHVCQUF1QjtJQU1mO0lBQ0E7SUFDQTtJQVBYLFFBQVEsQ0FBc0I7SUFDdEM7O09BRUc7SUFDSCxZQUNtQixpQkFBMkMsRUFDM0MsT0FBZ0IsRUFDaEIsTUFBYztRQUZkLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBMEI7UUFDM0MsWUFBTyxHQUFQLE9BQU8sQ0FBUztRQUNoQixXQUFNLEdBQU4sTUFBTSxDQUFRO0lBQzlCLENBQUM7SUFFSjs7T0FFRztJQUNILFdBQVcsR0FBRyxLQUFLLElBQXNCLEVBQUU7UUFDekMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsTUFBTSwrQkFBK0IsR0FDbkMsSUFBSSwrQkFBK0IsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ25FLE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxzQkFBc0IsQ0FDdkQsK0JBQStCLENBQUMsMkJBQTJCLEVBQUUsRUFDN0QsSUFBSSxDQUFDLE1BQU0sQ0FDWixDQUFDO1lBQ0YsTUFBTSxTQUFTLEdBQUcsSUFBSSxvQkFBb0IsRUFBRSxDQUFDO1lBQzdDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxtQkFBbUIsQ0FDckMsSUFBSSxDQUFDLGlCQUFpQixFQUN0QixJQUFJLHNCQUFzQixDQUN4QixzQkFBc0IsQ0FBQyxXQUFXLEVBQUUsRUFDcEMsdUNBQXVDLEVBQUUsRUFDekMsSUFBSSxDQUFDLE9BQU8sQ0FDYixFQUNELElBQUksU0FBUyxFQUFFLEVBQ2YsSUFBSSx5QkFBeUIsQ0FDM0IsSUFBSSxZQUFZLEVBQUUsRUFDbEIsU0FBUyxFQUNULElBQUkseUJBQXlCLENBQUMsSUFBSSxvQkFBb0IsRUFBRSxDQUFDLEVBQ3pELDBCQUEwQixDQUFDLFdBQVcsRUFBRSxFQUN4QyxJQUFJLENBQUMsT0FBTyxDQUNiLEVBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FDYixDQUFDO1NBQ0g7UUFDRCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBGb3JtYXQsXG4gIFBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlckZhY3RvcnksXG4gIFByaW50ZXIsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9jbGktY29yZSc7XG5pbXBvcnQgeyBGaWxlV2F0Y2hpbmdTYW5kYm94IH0gZnJvbSAnLi9maWxlX3dhdGNoaW5nX3NhbmRib3guanMnO1xuaW1wb3J0IHsgQmFja2VuZElkU2FuZGJveFJlc29sdmVyLCBTYW5kYm94IH0gZnJvbSAnLi9zYW5kYm94LmpzJztcbmltcG9ydCB7IEJhY2tlbmREZXBsb3llckZhY3RvcnkgfSBmcm9tICdAYXdzLWFtcGxpZnkvYmFja2VuZC1kZXBsb3llcic7XG5pbXBvcnQgeyBBbXBsaWZ5U2FuZGJveEV4ZWN1dG9yIH0gZnJvbSAnLi9zYW5kYm94X2V4ZWN1dG9yLmpzJztcbmltcG9ydCB7IFNTTUNsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1zc20nO1xuaW1wb3J0IHsgZ2V0U2VjcmV0Q2xpZW50V2l0aEFtcGxpZnlFcnJvckhhbmRsaW5nIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtc2VjcmV0JztcbmltcG9ydCB7IENsb3VkV2F0Y2hMb2dzQ2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWNsb3Vkd2F0Y2gtbG9ncyc7XG5pbXBvcnQgeyBMYW1iZGFDbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtbGFtYmRhJztcbmltcG9ydCB7IEJhY2tlbmRPdXRwdXRDbGllbnRGYWN0b3J5IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2RlcGxveWVkLWJhY2tlbmQtY2xpZW50JztcbmltcG9ydCB7IExhbWJkYUZ1bmN0aW9uTG9nU3RyZWFtZXIgfSBmcm9tICcuL2xhbWJkYV9mdW5jdGlvbl9sb2dfc3RyZWFtZXIuanMnO1xuaW1wb3J0IHsgQ2xvdWRXYXRjaExvZ0V2ZW50TW9uaXRvciB9IGZyb20gJy4vY2xvdWR3YXRjaF9sb2dzX21vbml0b3IuanMnO1xuaW1wb3J0IHsgQ2xvdWRGb3JtYXRpb25DbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtY2xvdWRmb3JtYXRpb24nO1xuXG4vKipcbiAqIEZhY3RvcnkgdG8gY3JlYXRlIGEgbmV3IHNhbmRib3hcbiAqL1xuZXhwb3J0IGNsYXNzIFNhbmRib3hTaW5nbGV0b25GYWN0b3J5IHtcbiAgcHJpdmF0ZSBpbnN0YW5jZTogU2FuZGJveCB8IHVuZGVmaW5lZDtcbiAgLyoqXG4gICAqIHNhbmRib3hJZFJlc29sdmVyIGFsbG93cyBzYW5kYm94IHRvIGxhemlseSBsb2FkIHRoZSBzYW5kYm94IGJhY2tlbmQgaWQgb24gZGVtYW5kXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNhbmRib3hJZFJlc29sdmVyOiBCYWNrZW5kSWRTYW5kYm94UmVzb2x2ZXIsXG4gICAgcHJpdmF0ZSByZWFkb25seSBwcmludGVyOiBQcmludGVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZm9ybWF0OiBGb3JtYXRcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc2luZ2xldG9uIGluc3RhbmNlIG9mIGEgU2FuZGJveFxuICAgKi9cbiAgZ2V0SW5zdGFuY2UgPSBhc3luYyAoKTogUHJvbWlzZTxTYW5kYm94PiA9PiB7XG4gICAgaWYgKCF0aGlzLmluc3RhbmNlKSB7XG4gICAgICBjb25zdCBwYWNrYWdlTWFuYWdlckNvbnRyb2xsZXJGYWN0b3J5ID1cbiAgICAgICAgbmV3IFBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlckZhY3RvcnkocHJvY2Vzcy5jd2QoKSwgdGhpcy5wcmludGVyKTtcbiAgICAgIGNvbnN0IGJhY2tlbmREZXBsb3llckZhY3RvcnkgPSBuZXcgQmFja2VuZERlcGxveWVyRmFjdG9yeShcbiAgICAgICAgcGFja2FnZU1hbmFnZXJDb250cm9sbGVyRmFjdG9yeS5nZXRQYWNrYWdlTWFuYWdlckNvbnRyb2xsZXIoKSxcbiAgICAgICAgdGhpcy5mb3JtYXRcbiAgICAgICk7XG4gICAgICBjb25zdCBjZm5DbGllbnQgPSBuZXcgQ2xvdWRGb3JtYXRpb25DbGllbnQoKTtcbiAgICAgIHRoaXMuaW5zdGFuY2UgPSBuZXcgRmlsZVdhdGNoaW5nU2FuZGJveChcbiAgICAgICAgdGhpcy5zYW5kYm94SWRSZXNvbHZlcixcbiAgICAgICAgbmV3IEFtcGxpZnlTYW5kYm94RXhlY3V0b3IoXG4gICAgICAgICAgYmFja2VuZERlcGxveWVyRmFjdG9yeS5nZXRJbnN0YW5jZSgpLFxuICAgICAgICAgIGdldFNlY3JldENsaWVudFdpdGhBbXBsaWZ5RXJyb3JIYW5kbGluZygpLFxuICAgICAgICAgIHRoaXMucHJpbnRlclxuICAgICAgICApLFxuICAgICAgICBuZXcgU1NNQ2xpZW50KCksXG4gICAgICAgIG5ldyBMYW1iZGFGdW5jdGlvbkxvZ1N0cmVhbWVyKFxuICAgICAgICAgIG5ldyBMYW1iZGFDbGllbnQoKSxcbiAgICAgICAgICBjZm5DbGllbnQsXG4gICAgICAgICAgbmV3IENsb3VkV2F0Y2hMb2dFdmVudE1vbml0b3IobmV3IENsb3VkV2F0Y2hMb2dzQ2xpZW50KCkpLFxuICAgICAgICAgIEJhY2tlbmRPdXRwdXRDbGllbnRGYWN0b3J5LmdldEluc3RhbmNlKCksXG4gICAgICAgICAgdGhpcy5wcmludGVyXG4gICAgICAgICksXG4gICAgICAgIHRoaXMucHJpbnRlclxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XG4gIH07XG59XG4iXX0=