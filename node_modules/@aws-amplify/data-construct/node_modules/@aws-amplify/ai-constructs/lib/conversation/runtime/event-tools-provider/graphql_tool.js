"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphQlTool = void 0;
/**
 * A tool that use GraphQl queries.
 */
class GraphQlTool {
    /**
     * Creates GraphQl Tool
     */
    constructor(name, description, inputSchema, graphQlEndpoint, query, accessToken, _fetch = fetch) {
        this.name = name;
        this.description = description;
        this.inputSchema = inputSchema;
        this.graphQlEndpoint = graphQlEndpoint;
        this.query = query;
        this.accessToken = accessToken;
        this._fetch = _fetch;
        this.execute = async (input) => {
            if (!input) {
                throw Error(`GraphQl tool '${this.name}' requires input to execute.`);
            }
            const options = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/graphql',
                    Authorization: this.accessToken,
                },
                body: JSON.stringify({ query: this.query, variables: input }),
            };
            const req = new Request(this.graphQlEndpoint, options);
            const res = await this._fetch(req);
            const responseHeaders = {};
            res.headers.forEach((value, key) => (responseHeaders[key] = value));
            if (!res.ok) {
                const body = await res.text();
                throw new Error(`GraphQl tool '${this.name}' failed, response headers=${JSON.stringify(responseHeaders)}, body=${body}`);
            }
            const body = await res.json();
            if (body && typeof body === 'object' && 'errors' in body) {
                throw new Error(`GraphQl tool '${this.name}' failed, response headers=${JSON.stringify(responseHeaders)}, body=${JSON.stringify(body)}`);
            }
            return { json: body };
        };
    }
}
exports.GraphQlTool = GraphQlTool;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhcGhxbF90b29sLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbnZlcnNhdGlvbi9ydW50aW1lL2V2ZW50LXRvb2xzLXByb3ZpZGVyL2dyYXBocWxfdG9vbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFPQTs7R0FFRztBQUNILE1BQWEsV0FBVztJQUN0Qjs7T0FFRztJQUNILFlBQ1MsSUFBWSxFQUNaLFdBQW1CLEVBQ25CLFdBQTRCLEVBQ2xCLGVBQXVCLEVBQ3ZCLEtBQWEsRUFDYixXQUFtQixFQUNuQixTQUFTLEtBQUs7UUFOeEIsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUNaLGdCQUFXLEdBQVgsV0FBVyxDQUFRO1FBQ25CLGdCQUFXLEdBQVgsV0FBVyxDQUFpQjtRQUNsQixvQkFBZSxHQUFmLGVBQWUsQ0FBUTtRQUN2QixVQUFLLEdBQUwsS0FBSyxDQUFRO1FBQ2IsZ0JBQVcsR0FBWCxXQUFXLENBQVE7UUFDbkIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUdqQyxZQUFPLEdBQUcsS0FBSyxFQUNiLEtBQStCLEVBQ0UsRUFBRTtZQUNuQyxJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUNWLE1BQU0sS0FBSyxDQUFDLGlCQUFpQixJQUFJLENBQUMsSUFBSSw4QkFBOEIsQ0FBQyxDQUFDO2FBQ3ZFO1lBRUQsTUFBTSxPQUFPLEdBQWdCO2dCQUMzQixNQUFNLEVBQUUsTUFBTTtnQkFDZCxPQUFPLEVBQUU7b0JBQ1AsY0FBYyxFQUFFLHFCQUFxQjtvQkFDckMsYUFBYSxFQUFFLElBQUksQ0FBQyxXQUFXO2lCQUNoQztnQkFDRCxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQzthQUM5RCxDQUFDO1lBRUYsTUFBTSxHQUFHLEdBQUcsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUN2RCxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFbkMsTUFBTSxlQUFlLEdBQTJCLEVBQUUsQ0FBQztZQUNuRCxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDcEUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUU7Z0JBQ1gsTUFBTSxJQUFJLEdBQUcsTUFBTSxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQzlCLE1BQU0sSUFBSSxLQUFLLENBQ2IsaUJBQWlCLElBQUksQ0FBQyxJQUFJLDhCQUE4QixJQUFJLENBQUMsU0FBUyxDQUNwRSxlQUFlLENBQ2hCLFVBQVUsSUFBSSxFQUFFLENBQ2xCLENBQUM7YUFDSDtZQUNELE1BQU0sSUFBSSxHQUFHLE1BQU0sR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQzlCLElBQUksSUFBSSxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsSUFBSSxRQUFRLElBQUksSUFBSSxFQUFFO2dCQUN4RCxNQUFNLElBQUksS0FBSyxDQUNiLGlCQUFpQixJQUFJLENBQUMsSUFBSSw4QkFBOEIsSUFBSSxDQUFDLFNBQVMsQ0FDcEUsZUFBZSxDQUNoQixVQUFVLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FDbEMsQ0FBQzthQUNIO1lBRUQsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFvQixFQUFFLENBQUM7UUFDeEMsQ0FBQyxDQUFDO0lBekNDLENBQUM7Q0EwQ0w7QUF0REQsa0NBc0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXhlY3V0YWJsZVRvb2wgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgdHlwZSB7XG4gIFRvb2xJbnB1dFNjaGVtYSxcbiAgVG9vbFJlc3VsdENvbnRlbnRCbG9jayxcbn0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWJlZHJvY2stcnVudGltZSc7XG5pbXBvcnQgeyBEb2N1bWVudFR5cGUgfSBmcm9tICdAc21pdGh5L3R5cGVzJztcblxuLyoqXG4gKiBBIHRvb2wgdGhhdCB1c2UgR3JhcGhRbCBxdWVyaWVzLlxuICovXG5leHBvcnQgY2xhc3MgR3JhcGhRbFRvb2wgaW1wbGVtZW50cyBFeGVjdXRhYmxlVG9vbCB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIEdyYXBoUWwgVG9vbFxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIG5hbWU6IHN0cmluZyxcbiAgICBwdWJsaWMgZGVzY3JpcHRpb246IHN0cmluZyxcbiAgICBwdWJsaWMgaW5wdXRTY2hlbWE6IFRvb2xJbnB1dFNjaGVtYSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGdyYXBoUWxFbmRwb2ludDogc3RyaW5nLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcXVlcnk6IHN0cmluZyxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGFjY2Vzc1Rva2VuOiBzdHJpbmcsXG4gICAgcHJpdmF0ZSByZWFkb25seSBfZmV0Y2ggPSBmZXRjaFxuICApIHt9XG5cbiAgZXhlY3V0ZSA9IGFzeW5jIChcbiAgICBpbnB1dDogRG9jdW1lbnRUeXBlIHwgdW5kZWZpbmVkXG4gICk6IFByb21pc2U8VG9vbFJlc3VsdENvbnRlbnRCbG9jaz4gPT4ge1xuICAgIGlmICghaW5wdXQpIHtcbiAgICAgIHRocm93IEVycm9yKGBHcmFwaFFsIHRvb2wgJyR7dGhpcy5uYW1lfScgcmVxdWlyZXMgaW5wdXQgdG8gZXhlY3V0ZS5gKTtcbiAgICB9XG5cbiAgICBjb25zdCBvcHRpb25zOiBSZXF1ZXN0SW5pdCA9IHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2dyYXBocWwnLFxuICAgICAgICBBdXRob3JpemF0aW9uOiB0aGlzLmFjY2Vzc1Rva2VuLFxuICAgICAgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgcXVlcnk6IHRoaXMucXVlcnksIHZhcmlhYmxlczogaW5wdXQgfSksXG4gICAgfTtcblxuICAgIGNvbnN0IHJlcSA9IG5ldyBSZXF1ZXN0KHRoaXMuZ3JhcGhRbEVuZHBvaW50LCBvcHRpb25zKTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLl9mZXRjaChyZXEpO1xuXG4gICAgY29uc3QgcmVzcG9uc2VIZWFkZXJzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge307XG4gICAgcmVzLmhlYWRlcnMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4gKHJlc3BvbnNlSGVhZGVyc1trZXldID0gdmFsdWUpKTtcbiAgICBpZiAoIXJlcy5vaykge1xuICAgICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBHcmFwaFFsIHRvb2wgJyR7dGhpcy5uYW1lfScgZmFpbGVkLCByZXNwb25zZSBoZWFkZXJzPSR7SlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgcmVzcG9uc2VIZWFkZXJzXG4gICAgICAgICl9LCBib2R5PSR7Ym9keX1gXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICBpZiAoYm9keSAmJiB0eXBlb2YgYm9keSA9PT0gJ29iamVjdCcgJiYgJ2Vycm9ycycgaW4gYm9keSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgR3JhcGhRbCB0b29sICcke3RoaXMubmFtZX0nIGZhaWxlZCwgcmVzcG9uc2UgaGVhZGVycz0ke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICAgIHJlc3BvbnNlSGVhZGVyc1xuICAgICAgICApfSwgYm9keT0ke0pTT04uc3RyaW5naWZ5KGJvZHkpfWBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsganNvbjogYm9keSBhcyBEb2N1bWVudFR5cGUgfTtcbiAgfTtcbn1cbiJdfQ==