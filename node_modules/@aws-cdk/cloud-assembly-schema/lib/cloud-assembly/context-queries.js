"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoadBalancerListenerProtocol = exports.LoadBalancerType = exports.ContextProvider = void 0;
/**
 * Identifier for the context provider
 */
var ContextProvider;
(function (ContextProvider) {
    /**
     * AMI provider
     */
    ContextProvider["AMI_PROVIDER"] = "ami";
    /**
     * AZ provider
     */
    ContextProvider["AVAILABILITY_ZONE_PROVIDER"] = "availability-zones";
    /**
     * Route53 Hosted Zone provider
     */
    ContextProvider["HOSTED_ZONE_PROVIDER"] = "hosted-zone";
    /**
     * SSM Parameter Provider
     */
    ContextProvider["SSM_PARAMETER_PROVIDER"] = "ssm";
    /**
     * VPC Provider
     */
    ContextProvider["VPC_PROVIDER"] = "vpc-provider";
    /**
     * VPC Endpoint Service AZ Provider
     */
    ContextProvider["ENDPOINT_SERVICE_AVAILABILITY_ZONE_PROVIDER"] = "endpoint-service-availability-zones";
    /**
     * Load balancer provider
     */
    ContextProvider["LOAD_BALANCER_PROVIDER"] = "load-balancer";
    /**
     * Load balancer listener provider
     */
    ContextProvider["LOAD_BALANCER_LISTENER_PROVIDER"] = "load-balancer-listener";
    /**
     * Security group provider
     */
    ContextProvider["SECURITY_GROUP_PROVIDER"] = "security-group";
    /**
     * KMS Key Provider
     */
    ContextProvider["KEY_PROVIDER"] = "key-provider";
    /**
     * A plugin provider (the actual plugin name will be in the properties)
     */
    ContextProvider["PLUGIN"] = "plugin";
})(ContextProvider || (exports.ContextProvider = ContextProvider = {}));
/**
 * Type of load balancer
 */
var LoadBalancerType;
(function (LoadBalancerType) {
    /**
     * Network load balancer
     */
    LoadBalancerType["NETWORK"] = "network";
    /**
     * Application load balancer
     */
    LoadBalancerType["APPLICATION"] = "application";
})(LoadBalancerType || (exports.LoadBalancerType = LoadBalancerType = {}));
/**
 * The protocol for connections from clients to the load balancer
 */
var LoadBalancerListenerProtocol;
(function (LoadBalancerListenerProtocol) {
    /**
     * HTTP protocol
     */
    LoadBalancerListenerProtocol["HTTP"] = "HTTP";
    /**
     * HTTPS protocol
     */
    LoadBalancerListenerProtocol["HTTPS"] = "HTTPS";
    /**
     * TCP protocol
     */
    LoadBalancerListenerProtocol["TCP"] = "TCP";
    /**
     * TLS protocol
     */
    LoadBalancerListenerProtocol["TLS"] = "TLS";
    /**
     * UDP protocol
     * */
    LoadBalancerListenerProtocol["UDP"] = "UDP";
    /**
     * TCP and UDP protocol
     * */
    LoadBalancerListenerProtocol["TCP_UDP"] = "TCP_UDP";
})(LoadBalancerListenerProtocol || (exports.LoadBalancerListenerProtocol = LoadBalancerListenerProtocol = {}));
//# sourceMappingURL=data:application/json;base64,